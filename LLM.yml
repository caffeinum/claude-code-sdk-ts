# LLM.yml Documentation for Claude Code SDK TypeScript
library:
  name: "@instantlyeasy/claude-code-sdk-ts"
  version: 0.2.1
  purpose: TypeScript SDK for programmatic interaction with Claude Code CLI
  key_value: Type-safe wrapper with fluent API, streaming, and enhanced error handling

quick_usage:
  - pattern: "Basic query with fluent API"
    code: |
      import { claude } from '@instantlyeasy/claude-code-sdk-ts';
      
      const response = await claude()
        .withModel('sonnet')
        .query('Explain quantum computing')
        .asText();
    when_to_use: "For simple text queries with model selection"
  
  - pattern: "File operations with permissions"
    code: |
      const result = await claude()
        .allowTools('Read', 'Write', 'Edit')
        .acceptEdits()
        .query('Update all TypeScript imports')
        .asText();
    when_to_use: "When Claude needs to read or modify files"
  
  - pattern: "Stream responses for real-time display"
    code: |
      await claude()
        .query('Write a story')
        .stream(async (message) => {
          if (message.type === 'assistant') {
            process.stdout.write(message.content[0].text);
          }
        });
    when_to_use: "For progressive UI updates or long responses"
  
  - pattern: "Classic async generator API"
    code: |
      import { query } from '@instantlyeasy/claude-code-sdk-ts';
      
      for await (const message of query('Hello world')) {
        console.log(message);
      }
    when_to_use: "For backward compatibility or raw message access"

api_essentials:
  main_class: QueryBuilder
  key_methods:
    - claude()
    - withModel(model)
    - allowTools(...tools)
    - query(prompt)
    - asText()
    - asJSON()
    - stream(callback)
  instantiation: |
    // No instantiation needed - use factory function
    const builder = claude();

decision_tree:
  what_task:
    simple_text_query:
      use: "claude().query(prompt).asText()"
      example: "const answer = await claude().query('What is 2+2?').asText();"
      why: "Simplest API for text responses"
    
    file_operations:
      use: "claude().allowTools('Read', 'Write').query(prompt)"
      example: "await claude().allowTools('Read').query('Read package.json').asJSON();"
      why: "Control which file operations Claude can perform"
    
    streaming_response:
      use: "claude().query(prompt).stream(callback)"
      example: "await claude().query('...').stream(msg => console.log(msg));"
      why: "Real-time updates for better UX"
    
    error_handling:
      use: "Try-catch with typed error detection"
      example: |
        try {
          await claude().query('...').asText();
        } catch (error) {
          if (isRateLimitError(error)) {
            await wait(error.retryAfter * 1000);
          }
        }
      why: "Handle specific error types appropriately"
    
    retry_logic:
      use: "createRetryExecutor with strategy"
      example: |
        const retry = createExponentialRetryExecutor({ maxAttempts: 3 });
        await retry.execute(() => claude().query('...').asText());
      why: "Automatic retry for transient failures"

common_patterns:
  - name: "Extract JSON from response"
    code: |
      interface Config {
        name: string;
        version: string;
      }
      
      const config = await claude()
        .query('Generate a package.json')
        .asJSON<Config>();
  
  - name: "Handle tool permissions"
    code: |
      await claude()
        .allowTools('Read', 'Grep')  // Only allow reading
        .denyTools('Write', 'Bash')  // Explicitly deny dangerous tools
        .skipPermissions()           // Or bypass all prompts
        .query('Analyze the codebase');
  
  - name: "Use configuration files"
    code: |
      await claude()
        .withConfigFile('./claude-config.json')
        .withRole('developer')
        .query('Implement feature X');
  
  - name: "Token streaming with pause/resume"
    code: |
      const messageGen = claude().queryRaw('Write a poem');
      const tokenStream = createTokenStream(messageGen);
      const controller = tokenStream.getController();
      
      for await (const chunk of tokenStream.tokens()) {
        process.stdout.write(chunk.token);
        if (shouldPause) controller.pause();
      }

error_handling:
  - error: "CLINotFoundError"
    cause: "Claude Code CLI is not installed or not in PATH"
    solution: "Install Claude CLI first: npm install -g @anthropic-ai/claude-code"
  
  - error: "ProcessError with exit code 1"
    cause: "CLI execution failed - often authentication or model issues"
    solution: "Run 'claude login' first, or check model name (only 'sonnet' and 'opus' work)"
  
  - error: "RateLimitError"
    cause: "Too many requests to Claude API"
    solution: "Check error.retryAfter and wait before retrying"
  
  - error: "ToolPermissionError"
    cause: "Attempted to use a denied tool"
    solution: "Check error.tool and either allow it or use alternative approach"

configuration_example: |
  // claude-config.json
  {
    "version": "1.0",
    "globalSettings": {
      "model": "opus",
      "timeout": 60000,
      "permissionMode": "acceptEdits"
    },
    "mcpServers": {
      "file-system-mcp": {
        "defaultPermission": "allow",
        "tools": {
          "Write": "ask",
          "Delete": "deny"
        }
      }
    },
    "tools": {
      "allowed": ["Read", "Grep", "LS"],
      "denied": ["Bash"]
    }
  }

commands_summary:
  sdk_usage:
    - name: "query"
      purpose: "Send a prompt to Claude Code"
      key_flags: ["model", "allowedTools", "deniedTools", "timeout"]
    - name: "claude"
      purpose: "Create fluent API query builder"
      key_flags: []

flags_reference:
  query_options:
    model:
      effect: "Select Claude model"
      use_for: "choosing between 'sonnet' (faster) or 'opus' (more capable)"
    allowedTools:
      effect: "Whitelist specific tools"
      use_for: "security - only allow needed operations"
    deniedTools:
      effect: "Blacklist specific tools"
      use_for: "prevent dangerous operations like Bash"
    permissionMode:
      effect: "Control permission prompts"
      use_for: "'acceptEdits' to auto-approve, 'bypassPermissions' to skip all"

integration_tips:
  - tip: "Use fluent API for cleaner code"
    example: "Prefer claude().query() over the classic query() function"
  
  - tip: "Always handle authentication errors"
    example: "Catch and check for 'authentication' or 'unauthorized' in error messages"
  
  - tip: "Stream for better UX"
    example: "Use .stream() for long responses to show progress"
  
  - tip: "Configure permissions based on use case"
    example: "Reading only? Use .allowTools('Read', 'Grep', 'LS')"

dependencies:
  required:
    - "execa": "^8.0.1"
    - "which": "^4.0.0"
    - "js-yaml": "^4.1.0"
  
  peer:
    - "node": ">=18.0.0"
    - "@anthropic-ai/claude-code": "CLI must be installed separately"